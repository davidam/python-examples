#+TITLE: Wikidata with SPARQL
#+AUTHOR: David Arroyo Menéndez
#+OPTIONS: H:2 toc:nil num:t
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

* Summary
** Wikidata Definition
Wikidata is a collaboratively edited knowledge base hosted by the
Wikimedia Foundation. It is a common source of open data that
Wikimedia projects such as Wikipedia can use, and anyone else,
under a public domain license. This is similar to the way Wikimedia
Commons provides storage for media files and access to those files for
all Wikimedia projects, and which are also freely available for
reuse. Wikidata is powered by the software Wikibase.

See: https://www.wikidata.org

** SPARQL definition

SPARQL is a recursive acronym for SPARQL Protocol and RDF Query
Language) is an RDF query language—that is, a semantic query language
for databases—able to retrieve and manipulate data stored in Resource
Description Framework.

** Linked Open Data. History

#+attr_html: :width 200px
#+attr_latex: :width 200px
file:img/linkedopendata.jpg

** Linked Open Data. History

#+attr_html: :width 200px
#+attr_latex: :width 200px
file:img/linkedopendata2.jpg

** SPARQL in Python, dbpedia as example

#+BEGIN_SRC python
from SPARQLWrapper import SPARQLWrapper, JSON

sparql = SPARQLWrapper("http://dbpedia.org/sparql")
sparql.setQuery("""
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    SELECT ?label
    WHERE { <http://dbpedia.org/resource/Asturias> rdfs:label ?label }
""")
sparql.setReturnFormat(JSON)
results = sparql.query().convert()

for result in results["results"]["bindings"]:
    print(result["label"]["value"])
#+END_SRC

** Wikidata: semantic model in a wikipedia page (I)

#+attr_html: :width 200px
#+attr_latex: :width 200px
file:img/semanticweb.png

** Wikidata: semantic model in a wikipedia page (II)

+ Properties (P) (https://www.wikidata.org/wiki/Wikidata:List_of_properties/all_in_one_table)
+ Querying for Values (Q) (https://www.wikidata.org/w/index.php?search=)

** Wikidata: semantic model in a wikipedia page (III)

#+attr_html: :width 150px
#+attr_latex: :width 150px
file:img/semanticweb2.png

** Wikidata: semantic model in a wikipedia page (IV)

file:img/semanticweb3.png

** Wikidata and Reasonator

file:img/bach.png

** Wikidata as Language

If you take a look at Germany (Q183), then you can see a whole host of
properties like population (P1082), median income (P3529) or even
images with the image (P18) property.

#+BEGIN_SRC SQL
SELECT
  ?country ?countryLabel ?population ?area ?medianIncome
WHERE {
  ?country wdt:P463 wd:Q458.
  ?country wdt:P1082 ?population.
  ?country wdt:P2046 ?area.
  ?country wdt:P3529 ?medianIncome.

  SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
}
#+END_SRC

** Wikidata in Python (I)

#+BEGIN_SRC python
import requests
url = 'https://query.wikidata.org/sparql'
query = """
SELECT
  ?country ?countryLabel ?population ?area ?medianIncome
WHERE {
  ?country wdt:P463 wd:Q458.
  ?country wdt:P1082 ?population.
  ?country wdt:P2046 ?area.
  ?country wdt:P3529 ?medianIncome.
  SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
}
"""
r = requests.get(url, params = {'format': 'json', 'query': query})
data = r.json()
print(data)
#+END_SRC

** Wikidata in Python (II)

Print ten females in json.

#+BEGIN_SRC python
import requests

url = "https://query.wikidata.org/sparql"

query = """
SELECT ?name ?nombre ?sexo_o_g_nero ?sexo_o_g_neroLabel WHERE {
  ?human wdt:P31 wd:Q5.
  OPTIONAL { ?human wdt:P21 ?nombre. }
  OPTIONAL { ?human wdt:P21 ?sexo_o_g_nero. }
}
LIMIT 10"""

r = requests.get(url, params = {'format': 'json', 'query': query})
data = r.json()
print(data)

print(data['results']['bindings'])
#+END_SRC

** Wikidata in Python (III)

Print ten cats in json:

#+BEGIN_SRC python
import requests
url = "https://query.wikidata.org/sparql"
query = """#added before 2016-10
#Cats
SELECT ?item ?itemLabel
WHERE
{
  ?item wdt:P31 wd:Q146.
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
}
LIMIT 10
"""
r = requests.get(url, params = {'format': 'json', 'query': query})
data = r.json()
print(data['results']['bindings'])
#+END_SRC

** Wikidata in Python (IV)
Full examples!

#+BEGIN_SRC bash
$ python3 wikidata-female-artists.py
$ python3 wikidata-female-scientists.py
$ python3 female-streets-fr.py
$ python3 wikispecies.py
#+END_SRC

** References

+ Wikidata: a free collaborative knowledge base
+ https://www.wikidata.org
+ https://tools.wmflabs.org/reasonator/
