#+TITLE: Practical NLTK
#+AUTHOR: David Arroyo Menéndez
#+OPTIONS: H:2 toc:nil num:t
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

* Summary
** Practical NLTK: Summary
#+BEGIN_SRC bash
$ git clone https://github.com/davidam/python-examples.git
#+END_SRC

1. Sentiment Analysis
2. Detect Gender
3. Sentence Similarity
4. Text Summary
5. Classify Documents
6. Manage Words
7. Gramatical Trees
8. Extract Keywords
9. Disambiguation
10. Bots
11. Extending ML with Scikit

**** This will be formatted as a beamer note                       :B_note:
     :PROPERTIES:
     :BEAMER_env: note
     :END:

** Sentiment Analysis
*** Tweets positives versus negatives                               :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 tweet-sentyment.py
    $ python3 sentiment-analysis-vader.py
    $ python3 sentiment.py
#+END_SRC

** Detect Gender
*** Your name is your gender                                        :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 sexmachine.py
    $ python3 perceval_git_counter_sexmachine.py
    $ python3 perceval_mbox_sexmachine.py
#+END_SRC

** Sentence Similarity
*** Sentence Similarity
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 sentence-similarity.py
    $ nosetests3 test/test_sentencesimilarity.py
#+END_SRC

** Classify Documents
*** Classify Documents                                              :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 doc-classification-ch06.py
#+END_SRC

** Classify Newsgroups
*** Classify Newsgroups                                             :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 nltk-sklearn.py
#+END_SRC

** Manage Words (I)
*** Synonims and Antonims                                           :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 synonims-antonims.py
#+END_SRC

** Manage Words (II)
*** Singulars and Plurals 					    :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 stem.py
    $ nosetests3 test/test_stem.py
#+END_SRC

** Manage Words (III)

*** Sillables                                                       :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 silaba.py
#+END_SRC

** Manage Words (IV)
For some search engines, these are some of the most common, short
function words, such as the, is, at, which, and on. In this case, stop
words can cause problems when searching for phrases that include them

*** Stopwords                                                       :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 stopwords.py
    $ nosetests3 test/test_stopwords.py
#+END_SRC

** Manage Words (V)
*** Lemmas: dictionary entries                                      :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 wordnet-lemmatizer.py
    $ nosetests3 test/test_wordnet.py:TddInPythonExample.test_synonims_lemmas_method_returns_correct_result
#+END_SRC

** Manage Words (VI)

A bag of words is the available words in a text and keep count of how
many times they appear

*** Bag of words                                                    :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 bag-of-words.py
#+END_SRC

** Manage Words (VII)

*** Unusual words                                             :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 code_unusual.py
#+END_SRC



** Trees (I)

A gramatical tree is the gramatical structure about a natural language

*** Trees (I)                                                       :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    I can build a gramatic or semantic tree from a sentence
    $ python3 semantic-tree.py
    I can generate sentences from a gramatic
    $ python3 howtos/generate.py
    I can visualize a gramatic
    $ python3 parse-tree.py
    I can obtain bigrams, trigrams or ngrams
    $ python3 bigrams-trigrams.py
    $ nosetests3 test/test_bigrams_trigrams.py
#+END_SRC

** Trees (II)
*** Trees (II)                                                      :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    I can print a tree from sintactic pairs
    $ python3 code-chinker.py
    I can build sintactic pairs from a sentence and print a tree
    $ python3 tokenizeandtag.py
    $ python3 ner.py
    I can find sentences verb to verb with trigrams
    $ python3 code_three_word_phrase.py
#+END_SRC

** Corpus
*** Corpus                                                          :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 gutenberg.py
    $ nosetests3 test/test_gutenberg.py
    $ python3 inaugural.py
    $ python3 corpus-howto-new-corpus.py
#+END_SRC

** Keywords: rake algorithm
*** Keywords: rake algorithm                                        :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 nltk-rake.py
#+END_SRC

** Disambiguation
*** Disambiguation                                        :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
$ python test_all_words_wsd.py
$ python test_wsd.py

# Remember synset
$ python3 wordnet-example.py
$ nosetests3 test/test_wordnet.py
#+END_SRC

** Detect languages
*** Detect languages                                                :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
$ python3 wordnet-example.py
$ nosetests3 test/test_wordnet.py
#+END_SRC


** Sharing data models: pickle
*** Sharing data models: pickle                                     :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
$ python3 nltk-pickle.py
#+END_SRC
** Bots

*** Bots                                                            :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
$ python3 eliza.py
$ python3 chatbot.py
#+END_SRC

** Using Scikit in NLTK (I)

file:img/scikit-graph.png

** Using Scikit in NLTK (II)

*** Using Scikit in NLTK (II)                                       :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
$ pip3 install damenltk
$ cd damenltk/damenltk
$ nosetest3 test/test_svc.py
$ nosetest3 test/test_bernoulli.py
#+END_SRC

** Using Scikit in NLTK (III)

*** Discovering NLTK and Scikit in Damegender                       :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
$ pip3 install damegender
$ cd damegender/src/app
$ grep sklearn *
$ grep nltk *
#+END_SRC

** Pagerank Algorithm

A webpage has an higher pagerank if has many links the links that is
linking has an higher pagerank.

** Book References
+ Python Tutorial (Guido Van Rossum)
+ El Tutorial de Python por Guido Van Rossum
+ Natural Language Processing with Python 
(Steven Bird, Ewan Klein, and Edward Loper)

** Papers References (I)

*** NLTK: The Natural Language Toolkit                       :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
Edward Loper and Steven Bird

URL: https://arxiv.org/pdf/cs/0205028
Citations: 1952

** Papers References (II)
*** Scikit-learn: Machine Learning in Python
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
Fabian Pedregosa, Gaël Varoquaux, Alexandre Gramfort, Vincent Michel
and Bertrand Thirion

URL: http://www.jmlr.org/papers/v12/pedregosa11a.html
Citations: 15926

** Papers References (III)
*** The PageRank Citation Ranking: Bringing Order to the Web
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
Lawrence Page, Sergey Brin, Motwani Rajeev and Winograd Terry

URL: http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf
Citations: 15691

** License

This document is under a [[http://creativecommons.org/licenses/by-sa/4.0/deed][Creative Commons Attribution-ShareAlike 4.0
International]]

